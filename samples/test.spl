/*
    .spl is pronounced spill, standing for "simple programming language"

    - Functions are not first class, can't pass them around
    - Variable types are null, boolean, number (double), string, list, and map
        - Strings are a const std::string
        - Lists are a std::shared_ptr<std::vector<Value>>
        - Maps are a std::shared_ptr<std::map<std::string, Value>>

    number: 0.4
    boolean: true
    string: "Here we go!"
    list: [1, "any", null, true]
    map: ("only" = 2, "strings" = 5)

    Operators are done using polish notation,
    so that I don't have to implement operator precedence

    := x null;  declare x to null
    = x + 5 3;  assign x to (add 5 to 3)

    := arr [5, 3, + 4 2];
    = .arr 0 + 7 6; assign (index arr at 0) to (add 7 to 6);

    $func (1, + 2 3) call func with (1, add 2 3)
*/

:= static 5;

fn identity(x) { return x; }

fn goober() {
    $print(= + 0.1 0.2 0.3);
}

fn main(args) {
    $goober();
}

/*
    Since the body of a function is a statement,
    and not strictly a block, this works
*/
fn f(x) return + x 5;