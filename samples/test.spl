/*
    .spl, short for "shrimple programming language", is pronounced "spill"

    - Functions are not first class, can't pass them around
    - Variable types are null, boolean, number (double), string, list, map, and extern
        - Strings are a const std::string
        - Lists are a std::shared_ptr<std::vector<Value>>
        - Maps are a std::shared_ptr<std::map<std::string, Value>>

    number: 0.4
    boolean: true
    string: "Here we go!"
    list: [1, "any", null, true]
    map: ("only" = 2, "strings" = 5)

    Operators are done using polish notation,
    so that I don't have to implement operator precedence

    := x null;  declare x to null
    = x + 5 3;  assign x to (add 5 to 3)

    := arr [5, 3, + 4 2];
    = .arr 0 + 7 6; assign (index arr at 0) to (add 7 to 6);

    $func (1, + 2 3); call func with (1, add 2 3)

    try {
        $std::raise(1);
    } recover err {
        $std::print(err);
    }
*/

use import;
use import::wawa;

:= static 5;

fn identity(x) { return x; }

fn goober() {
    /* x isn't in scope here, this should error */
    $std::print(x);
}

fn estimate_recursion_depth_limit(i) {
    if == i null = i 0;
    try {
        $estimate_recursion_depth_limit(+ i 1);
    } recover err {
        $std::print(+ "recursion depth limit: " i);
    }
}

fn test() {
    $std::print(__ARGC);
}

fn main(args) {
    $std::print(+ + "" args "\n");
    := map ("3" = 1, "4" = 5);
    $estimate_recursion_depth_limit();

    $std::print("\n");
    := x 5;
    {
        := x 3;
        $std::print(x);
    }
    $std::print(x);
    $std::print("\n");


    try / 1 0;
    recover err $std::print(err);

    := x null;

    $test(1, 2, 3);
    $test(1, 2);

    := i 0;
    loop {
        $std::println(i);
        if >= i 10 break;
        = i + i 1;
    }

    := map ("x" = 5, "x" = 4);

    = import::ago 7;
    $std::println(import::wawa::x);

    $std::println(<< 1 4);
    $std::println(>> -1 1);

    $std::print(? true "cool " $std::crash());
    $std::println(? false $std::crash() "good");

    := foo 5;
    := bar 7;

    = ? false foo bar 3;

    $std::println(? > $std::math::rand() 0.5 "heads" "tails");

    $std::println([foo, bar]);
    $std::println("te\nst");
    $std::println(["te\nst"]);
    $std::println(["te\xA0\xA0st"]);

    if != "cbacbacba" * "cba" 3 $std::crash("oh no");

    = .map "y" 5;
    $std::print(["y", . map "y"]);
    $std::println(. map "x");

    $std::println($std::string::substring("homeowner", 2, 4));

    := list [];
    try $std::list::pop(list); recover err $std::println(err);
    $std::println(list);

    = map ();
    := v "among";
    = . map v "us";
    $std::println(map);

    if false return 5; else if false { return 3; } else return 0;
}

/*
    Since the body of a function is a statement,
    and not strictly a block, this works
*/
fn f(x) return + x 5;